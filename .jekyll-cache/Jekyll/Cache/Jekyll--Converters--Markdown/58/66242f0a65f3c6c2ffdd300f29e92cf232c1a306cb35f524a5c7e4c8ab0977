I"˜t<p>This is my second post in this site, as i mentioned before. I want to use this site as a platform to share my knowledge. This time i want to share a topic about in-app queue, maybe some of you already know what is queue system. But for the sake of others who dont know, i will discuss it a little.</p>

<p>In the context of web service, <strong>queue system</strong> is an asynchronous process that run in the background and there are worker for every queue which run differently from the web service itself.</p>

<p>So letâ€™s say, you have an API for user registration and you want to send email in that API. If that process is synchronous, it can be toooo looooong. Because send an email is a heavy process, in order to fasten that API then you had to do an asynchronous process which run differently from the main service. Then came a solution to create a <strong>queue system</strong>, itâ€™s basically a tube or a place where you put something from one service to be worked by other service. Letâ€™s put it in to an image:</p>

<p><img src="/assets/queue-system.png" alt="Queue System" /></p>

<p>By using queue system we are not blocking the main process of user registration and send an email to registrated user with faster response time. There are several open source technology you can use for queue system, such as:</p>

<ul>
  <li><a href="https://www.rabbitmq.com/">RabbitMQ</a></li>
  <li><a href="https://kafka.apache.org/">Apache Kafka</a></li>
  <li><a href="https://beanstalkd.github.io/">Beanstalkd</a></li>
</ul>

<p>Every technology comes with their own scenario to solve a problem, it will cost you more but itâ€™s essential for medium to large scale application. We are not gonna talk about that technology here, instead we will make our own in-app queue system using Go with far more cheaper cost than those technology above.</p>

<p>How can we make that? Go, is invented to solve modern programming language problem such as concurrency and garbage collecting, that makes Go a lightweight programming language.</p>

<p>There are feature in Go called Channel, we will use this feature to create our in-app queue system. This image bellow are gonna tell what will we create later:</p>

<p><img src="/assets/in-app-queue.jpg" alt="Queue System" /></p>

<p>So there are asynchronous process inside of web service without blocking user registration process, itâ€™s called <strong>Channel</strong>.  Maybe some of you already know, <strong>channels</strong> are the pipes that connect concurrent goroutines. You can send values into channels from one goroutine and receive those values into another goroutine.</p>

<p>Prepare VS Code (or else) we will do some practical stuff!</p>

<h3 id="1-initialize-your-go-app-with-go-module">1. Initialize your go app with go module</h3>

<p>We will use go module as our package manager, make sure you are using go version 1.11 or above.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	go mod init github.com/<span class="o">{</span>your-cool-github-username<span class="o">}</span>/inapp-queue
</code></pre></div></div>

<p>Create main package:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// main.go</span>
<span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">var</span> <span class="n">server</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Server</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"In app queue system"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2-create-web-service-using-gin">2. Create Web Service Using GIN</h3>

<p>I prefer gin to create my web service, if you want to use another http router then go for it. I prefer using master branch when add gin as my dependencies, you can use latest table branch if you want.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	go get github.com/gin-gonic/gin@master
</code></pre></div></div>

<p>Add this code to <strong>main.go</strong>.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">appEngine</span> <span class="o">:=</span> <span class="n">gin</span><span class="o">.</span><span class="n">Default</span><span class="p">()</span>
	<span class="n">appEngine</span><span class="o">.</span><span class="n">POST</span><span class="p">(</span><span class="s">"/users"</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>

		<span class="c">// Send an email represented by this time sleep</span>
		<span class="k">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="o">*</span><span class="m">2</span><span class="p">)</span>
			<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Complete send an email"</span><span class="p">)</span>
		<span class="p">}()</span>

		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusCreated</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span>
			<span class="s">"data"</span><span class="o">:</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span>
				<span class="s">"username"</span><span class="o">:</span> <span class="s">"user1"</span><span class="p">,</span>
				<span class="s">"email"</span><span class="o">:</span>    <span class="s">"user1@gmail.com"</span><span class="p">,</span>
			<span class="p">},</span>
			<span class="s">"message"</span><span class="o">:</span> <span class="s">"success create new users"</span><span class="p">,</span>
			<span class="s">"status"</span><span class="o">:</span>  <span class="n">http</span><span class="o">.</span><span class="n">StatusCreated</span><span class="p">,</span>
		<span class="p">})</span>
	<span class="p">})</span>
	<span class="n">server</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">http</span><span class="o">.</span><span class="n">Server</span><span class="p">{</span>
		<span class="n">Addr</span><span class="o">:</span>    <span class="s">":8080"</span><span class="p">,</span>
		<span class="n">Handler</span><span class="o">:</span> <span class="n">appEngine</span><span class="p">,</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">server</span><span class="o">.</span><span class="n">ListenAndServe</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">&amp;&amp;</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">http</span><span class="o">.</span><span class="n">ErrServerClosed</span> <span class="p">{</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Unexpected server error because of: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
</code></pre></div></div>

<p>Run the web service.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	go run main.go
</code></pre></div></div>

<p>Test the designated URL with curl</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	curl <span class="nt">--request</span> POST localhost:8080/users
</code></pre></div></div>

<p>It should return a response like this.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nl">"data"</span><span class="p">:{</span><span class="nl">"email"</span><span class="p">:</span><span class="s2">"user1@gmail.com"</span><span class="p">,</span><span class="nl">"username"</span><span class="p">:</span><span class="s2">"user1"</span><span class="p">},</span><span class="nl">"message"</span><span class="p">:</span><span class="s2">"success create new users"</span><span class="p">,</span><span class="nl">"status"</span><span class="p">:</span><span class="mi">201</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>And print this in your web service terminal log.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	Complete send email
</code></pre></div></div>

<p>The response time of that API should be two second. Actually you can make you process concurent by adding <code class="language-plaintext highlighter-rouge">go</code> before send email function. Lets try that, change your send email function:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    		<span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span> <span class="o">*</span> <span class="m">2</span><span class="p">)</span>
			<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Complete send an email"</span><span class="p">)</span>
		<span class="p">}()</span>
</code></pre></div></div>

<p>Yay, we already make it fasten in such an easy way like that. Yes! We could do that, but it isnâ€™t safe, why? This is the question, how do we know if there is some concurrency doing their job when we want to restart the server? Say, that there will be a deployment tomorrow, what would we do in the deployment process? Just shutdown the server? Then how we can ensure that every email sent to the registering users, there are probability that some users not receiving an email when in that deployment process.</p>

<p>We should use more reliable method to do this, we have to use go channel and make sure the channel is drained if there is a terminate signal or a kill signal from the OS. Then shutdown the app when there is no left over process in the app. Using that way we can ensure all email sent to registrated users without having so much work or procedure in our deployment process.</p>

<h2 id="3-create-queue-package">3. Create Queue Package</h2>

<p>Create new directory in your workspace named <code class="language-plaintext highlighter-rouge">queue</code>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// queue/email_queue.go</span>

<span class="k">package</span> <span class="n">queue</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
	<span class="s">"time"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">emailQueue</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">emailChannel</span>   <span class="k">chan</span> <span class="kt">string</span>
	<span class="n">workingChannel</span> <span class="k">chan</span> <span class="kt">bool</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewEmailQueue</span><span class="p">()</span> <span class="o">*</span><span class="n">emailQueue</span> <span class="p">{</span>
	<span class="n">emailChannel</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="m">10000</span><span class="p">)</span>
	<span class="n">workingChannel</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="m">10000</span><span class="p">)</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="n">emailQueue</span><span class="p">{</span>
		<span class="n">emailChannel</span><span class="o">:</span>   <span class="n">emailChannel</span><span class="p">,</span>
		<span class="n">workingChannel</span><span class="o">:</span> <span class="n">workingChannel</span><span class="p">,</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">e</span> <span class="o">*</span><span class="n">emailQueue</span><span class="p">)</span> <span class="n">Work</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="n">eChan</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="n">e</span><span class="o">.</span><span class="n">emailChannel</span><span class="o">:</span>
			<span class="n">e</span><span class="o">.</span><span class="n">workingChannel</span> <span class="o">&lt;-</span> <span class="no">true</span>

			<span class="c">// Let's assume this time sleep is send email process</span>
			<span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span> <span class="o">*</span> <span class="m">2</span><span class="p">)</span>
			<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">eChan</span><span class="p">)</span>

			<span class="o">&lt;-</span><span class="n">e</span><span class="o">.</span><span class="n">workingChannel</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">e</span> <span class="o">*</span><span class="n">emailQueue</span><span class="p">)</span> <span class="n">Size</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">emailChannel</span><span class="p">)</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">workingChannel</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">e</span> <span class="o">*</span><span class="n">emailQueue</span><span class="p">)</span> <span class="n">Enqueue</span><span class="p">(</span><span class="n">emailString</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">e</span><span class="o">.</span><span class="n">emailChannel</span> <span class="o">&lt;-</span> <span class="n">emailString</span>
<span class="p">}</span>

</code></pre></div></div>

<p>We have this struct called email queue, there are two channel inside of it. Email and working channel. Email channel is carrying all enqueued data from others package, and working channel is to notify that this emailQueue is working on something.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">emailQueue</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">emailChannel</span>   <span class="k">chan</span> <span class="kt">string</span>
	<span class="n">workingChannel</span> <span class="k">chan</span> <span class="kt">bool</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We have this method called <code class="language-plaintext highlighter-rouge">Size()</code>, itâ€™s actually return that how much work that this emailQueue left to do.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">e</span> <span class="o">*</span><span class="n">emailQueue</span><span class="p">)</span> <span class="n">Size</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">emailChannel</span><span class="p">)</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">workingChannel</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And this work method, to fetch data from emailChannel and do the send email job.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">e</span> <span class="o">*</span><span class="n">emailQueue</span><span class="p">)</span> <span class="n">Work</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="n">eChan</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="n">e</span><span class="o">.</span><span class="n">emailChannel</span><span class="o">:</span>
			<span class="n">e</span><span class="o">.</span><span class="n">workingChannel</span> <span class="o">&lt;-</span> <span class="no">true</span>

			<span class="c">// Let's assume this time sleep is send email process</span>
			<span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span> <span class="o">*</span> <span class="m">2</span><span class="p">)</span>
			<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">eChan</span><span class="p">)</span>

			<span class="o">&lt;-</span><span class="n">e</span><span class="o">.</span><span class="n">workingChannel</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="4-use-os-signal">4. use OS Signal</h2>

<p>In order to drain all leftover job in the channel before shutdown the app, then you must listen to OS Signal. When you receive the signal, make sure to drain all leftover job in the channel.</p>

<p>Create osSignal variable in <strong>main.go</strong>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// inside main.go</span>
<span class="k">var</span> <span class="p">(</span>
	<span class="n">server</span>   <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Server</span>
	<span class="n">osSignal</span> <span class="k">chan</span> <span class="n">os</span><span class="o">.</span><span class="n">Signal</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Listen into interrupt and terminated signal:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// inside main.go</span>
<span class="c">// Initialize channel with the 10K length</span>
<span class="n">osSignal</span> <span class="o">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">os</span><span class="o">.</span><span class="n">Signal</span><span class="p">,</span> <span class="m">10000</span><span class="p">)</span>
<span class="n">signal</span><span class="o">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">osSignal</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">Interrupt</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGTERM</span><span class="p">)</span>
</code></pre></div></div>

<p>Implement queue logic in your main function, so it would look like this.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// main.go</span>
<span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"context"</span>
	<span class="s">"fmt"</span>
	<span class="s">"net/http"</span>
	<span class="s">"os"</span>
	<span class="s">"os/signal"</span>
	<span class="s">"syscall"</span>
	<span class="s">"time"</span>

	<span class="s">"github.com/gin-gonic/gin"</span>
	<span class="s">"github.com/insomnius/inapp-queue/queue"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="p">(</span>
	<span class="n">server</span>   <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Server</span>
	<span class="n">osSignal</span> <span class="k">chan</span> <span class="n">os</span><span class="o">.</span><span class="n">Signal</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c">// Initialize channel with the 10K length</span>
	<span class="n">osSignal</span> <span class="o">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">os</span><span class="o">.</span><span class="n">Signal</span><span class="p">,</span> <span class="m">10000</span><span class="p">)</span>
	<span class="n">signal</span><span class="o">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">osSignal</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">Interrupt</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGTERM</span><span class="p">)</span>

	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"In app queue system"</span><span class="p">)</span>

	<span class="n">emailQueue</span> <span class="o">:=</span> <span class="n">queue</span><span class="o">.</span><span class="n">NewEmailQueue</span><span class="p">()</span>

	<span class="n">appEngine</span> <span class="o">:=</span> <span class="n">gin</span><span class="o">.</span><span class="n">Default</span><span class="p">()</span>
	<span class="n">appEngine</span><span class="o">.</span><span class="n">POST</span><span class="p">(</span><span class="s">"/users"</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>

		<span class="c">// Enqueue into go channel</span>
		<span class="n">emailQueue</span><span class="o">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="s">"Send email to the user"</span><span class="p">)</span>

		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusCreated</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span>
			<span class="s">"data"</span><span class="o">:</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span>
				<span class="s">"username"</span><span class="o">:</span> <span class="s">"user1"</span><span class="p">,</span>
				<span class="s">"email"</span><span class="o">:</span>    <span class="s">"user1@gmail.com"</span><span class="p">,</span>
			<span class="p">},</span>
			<span class="s">"message"</span><span class="o">:</span> <span class="s">"success create new users"</span><span class="p">,</span>
			<span class="s">"status"</span><span class="o">:</span>  <span class="n">http</span><span class="o">.</span><span class="n">StatusCreated</span><span class="p">,</span>
		<span class="p">})</span>
	<span class="p">})</span>
	<span class="n">server</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">http</span><span class="o">.</span><span class="n">Server</span><span class="p">{</span>
		<span class="n">Addr</span><span class="o">:</span>    <span class="s">":8080"</span><span class="p">,</span>
		<span class="n">Handler</span><span class="o">:</span> <span class="n">appEngine</span><span class="p">,</span>
	<span class="p">}</span>

	<span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">server</span><span class="o">.</span><span class="n">ListenAndServe</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">&amp;&amp;</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">http</span><span class="o">.</span><span class="n">ErrServerClosed</span> <span class="p">{</span>
			<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Unexpected server error because of: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="c">// Spawn 10 worker in that channel</span>
	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">go</span> <span class="n">emailQueue</span><span class="o">.</span><span class="n">Work</span><span class="p">()</span>
	<span class="p">}</span>

	<span class="o">&lt;-</span><span class="n">osSignal</span>

	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Terminating server"</span><span class="p">)</span>
	<span class="n">server</span><span class="o">.</span><span class="n">Shutdown</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">())</span>

	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Terminating email queue"</span><span class="p">)</span>
	<span class="c">// Wait untuk there is no active job in the queue</span>
	<span class="k">for</span> <span class="n">emailQueue</span><span class="o">.</span><span class="n">Size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Millisecond</span> <span class="o">*</span> <span class="m">500</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Complete terminating application"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="5-lets-test-out">5. Letâ€™s test out!</h2>

<p>Run the web service:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run main.go
</code></pre></div></div>

<p>Spam it!</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">--request</span> POST localhost:8080/users
</code></pre></div></div>

<p><img src="/assets/Screenshot%20from%202019-09-29%2017-35-57.png" alt="Spam it!" /></p>

<p>Now, shut down the service, with Ctrl + C.</p>

<p><img src="/assets/Screenshot%20from%202019-09-29%2017-38-29.png" alt="Server terminating" /></p>

<p>You will see that after <code class="language-plaintext highlighter-rouge">^C</code> the service will drain out all leftover jobs before itâ€™s shutdown.</p>

<h2 id="conclusion">Conclusion</h2>

<p>In-app queue is very easy to implement with Go. If you want to see a source code, kindly check <a href="https://github.com/insomnius/inapp-queue">this repo</a>.</p>

<p>This is my first time to write tech article like this, please tell me if you have any suggestion with my write. Thanks, i hope you learn something new today!</p>
:ET